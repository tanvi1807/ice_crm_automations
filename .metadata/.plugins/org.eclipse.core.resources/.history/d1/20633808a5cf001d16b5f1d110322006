package com.ice_crm_automation.utility;



import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass {
 public WebDriver driver;
 ExtentTest log;
   public void lunchbrowser(String browser)
   {
	   switch(browser)
	   {
	    case "chrome":
	    	 ChromeOptions option1 = new ChromeOptions();
	    	 option1.addArguments("--remote-allow-origins=*");
	    	WebDriverManager.chromedriver().setup();
	    	driver=new ChromeDriver(setChromeOptions());
	    	break;
	    case "firefox":
	    	FirefoxOptions option2 = new FirefoxOptions();
	    	 option2.addArguments("--remote-allow-origins=*");
	    	WebDriverManager.firefoxdriver().setup();
	    	driver=new FirefoxDriver();
	    	break;
	    case "edge":
	    	EdgeOptions option3 = new EdgeOptions();
	    	 option3.addArguments("--remote-allow-origins=*");
	    	WebDriverManager.edgedriver().setup();
	    	driver=new EdgeDriver(setEdgeOptions());
	    	break;
	  
	    default :
	    	System.setProperty("webdriver.chrome.driver","chromedriver.exe");
	    	driver=new ChromeDriver(setChromeOptions());
	    	break;
	   }
	   
   }
 public void entertext(By by,String text)
 {
	 try
	 {
		 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		 wait.until(ExpectedConditions.presenceOfElementLocated(by));
		 driver.findElement(by).sendKeys(text);
		 
	 }
	 catch(Exception e)
	 {
		 e.printStackTrace();
	 }
 }
 
 
 public void click(By by)
 {
	 try
	 {
		WebDriverWait wait =new WebDriverWait (driver,Duration.ofSeconds(10));
		 wait.until(ExpectedConditions.elementToBeClickable(by));
		 
		 driver.findElement(by).click();
		 
	 }
	 catch(Exception e)
	 {
		 e.printStackTrace();
	 }
	 
}
	    public ChromeOptions setChromeOptions() {
	        ChromeOptions option = new ChromeOptions();
	        option.addArguments("start-maximized");
	        option.addArguments("--remote-allow-origins=*");
//	        option.addArguments("incognito");
//	        option.setHeadless(false);
//	        option.setExperimentalOption("excludeSwitches", Arrays.asList("disable-popup-clocking"));
//	        Map<String, String> prefs = new HashMap<>();
//	        prefs.put("download.default.directory", "c:/newfolder/download/");
//	        option.setExperimentalOption("prefs", prefs);
//	        option.setAcceptInsecureCerts(true);
	        return option;
	    }

	   

	    public EdgeOptions setEdgeOptions() {
	        EdgeOptions option = new EdgeOptions();
	        option.addArguments("start-maximized");
	        option.addArguments("--remote-allow-origins=*");
//	        option.addArguments("incognito");
//	        option.setHeadless(false);
//	        option.setExperimentalOption("excludeSwitches", Arrays.asList("disable-popup-clocking"));
//	        Map<String, String> prefs = new HashMap<>();
//	        prefs.put("download.default.directory", "c:/newfolder/download/");
//	        option.setExperimentalOption("prefs", prefs);
//	        option.setAcceptInsecureCerts(true);
	        return option;
	    }

	    public FirefoxOptions setFirefoxOptions() {
	    	FirefoxOptions option = new FirefoxOptions();
	        option.addArguments("start-maximized");
	        option.addArguments("--remote-allow-origins=*");
//	        option.addArguments("incognito");
//	        option.setHeadless(false);
	   //    option.setExperimentalOption("excludeSwitches", Arrays.asList("disable-popup-clocking"));
	      //  Map<String, String> prefs = new HashMap<>();
	      //  prefs.put("download.default.directory", "c:/newfolder/download/");
	    //    option.setExperimentalOption("prefs", prefs);
	      //  option.setAcceptInsecureCerts(true);
	       // option.setLegacy(true);
	        return option;
	    }

	    
 }





